import React, { useState, useEffect } from 'react'
import { X, Target, CheckCircle, Clock, Star, Users, Copy, Check, Link as LinkIcon } from 'lucide-react'
import { User, Task, getUserTasks, updateTaskProgress, getReferralByUserId } from '../lib/supabase'
import { useXAccountNotification } from '../hooks/useXAccountNotification'
import XAccountNotification from './XAccountNotification'

interface TasksMenuProps {
  user: User
  onClose: () => void
}

const TasksMenu: React.FC<TasksMenuProps> = ({ user, onClose }) => {
  const [tasks, setTasks] = useState<Task[]>([])
  const [loading, setLoading] = useState(true)
  const [copiedReferral, setCopiedReferral] = useState(false)
  const [referredBy, setReferredBy] = useState<string | null>(null)
  
  const {
    showNotification,
    hasXAccount,
    triggerXAccountCheck,
    dismissNotification,
    refreshXAccountStatus
  } = useXAccountNotification(user)

  // Use the referral_link from the user object (generated by the database)
  const referralLink = user.referral_link || `https://imaginative-mooncake-336861.netlify.app/ref/${user.referral_code || user.id}`

  useEffect(() => {
    loadTasks()
    loadReferralData()
    refreshXAccountStatus()
  }, [])

  const loadTasks = async () => {
    try {
      const userTasks = await getUserTasks(user.id)
      setTasks(userTasks)
      
      // Update task progress
      await updateTaskProgress(user.id)
      
      // Reload tasks to get updated progress
      const updatedTasks = await getUserTasks(user.id)
      setTasks(updatedTasks)
    } catch (error) {
      console.error('Error loading tasks:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadReferralData = async () => {
    try {
      const referralData = await getReferralByUserId(user.id)
      if (referralData && referralData.referrer) {
        setReferredBy((referralData.referrer as any).username)
      }
    } catch (error) {
      console.error('Error loading referral data:', error)
    }
  }

  const handleCopyReferral = async () => {
    try {
      await navigator.clipboard.writeText(referralLink)
      setCopiedReferral(true)
      setTimeout(() => setCopiedReferral(false), 2000)
    } catch (err) {
      console.error('Failed to copy referral link:', err)
    }
  }

  const handleXRelatedTask = async () => {
    // Check if user has X account before allowing X-related tasks
    if (!hasXAccount) {
      await triggerXAccountCheck()
      return false
    }
    return true
  }

  const handleConnectX = () => {
    // This would open the profile modal or X connection flow
    onClose() // Close tasks menu first
    // You can emit an event or call a parent function to open profile modal
  }

  const getTaskInfo = (taskType: string) => {
    const taskMap = {
      'invite_1': { 
        title: 'Invite 1 Friend', 
        description: 'Invite 1 friend who connects their X account', 
        points: 50,
        requiresX: false
      },
      'invite_5': { 
        title: 'Invite 5 Friends', 
        description: 'Invite 5 friends who connect their X accounts', 
        points: 100,
        requiresX: false
      },
      'invite_10': { 
        title: 'Invite 10 Friends', 
        description: 'Invite 10 friends who connect their X accounts', 
        points: 200,
        requiresX: false
      },
      'invite_50': { 
        title: 'Invite 50 Friends', 
        description: 'Invite 50 friends who connect their X accounts', 
        points: 500,
        requiresX: false
      },
      'invite_100': { 
        title: 'Invite 100 Friends', 
        description: 'Invite 100 friends who connect their X accounts', 
        points: 1000,
        requiresX: false
      }
    }
    return taskMap[taskType as keyof typeof taskMap] || { 
      title: 'Unknown Task', 
      description: '', 
      points: 0,
      requiresX: false
    }
  }

  const completedTasks = tasks.filter(task => task.completed)
  const pendingTasks = tasks.filter(task => !task.completed)
  const totalPointsEarned = completedTasks.reduce((sum, task) => sum + task.points_earned, 0)

  return (
    <>
      {/* X Account Notification */}
      {showNotification && (
        <XAccountNotification
          user={user}
          onDismiss={dismissNotification}
          onConnectX={handleConnectX}
        />
      )}

      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 flex items-center justify-center p-4">
        <div 
          className="w-full max-w-2xl max-h-[90vh] overflow-y-auto rounded-2xl border border-gray-700/50"
          style={{ backgroundColor: '#171717' }}
        >
          {/* Header */}
          <div className="sticky top-0 z-10 p-6 border-b border-gray-700/50" style={{ backgroundColor: '#171717' }}>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 rounded-lg bg-blue-500/20 flex items-center justify-center">
                  <Users className="w-5 h-5 text-blue-400" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">Invite Friends</h2>
                  <p className="text-sm text-gray-400">Earn points by inviting friends</p>
                </div>
              </div>
              <button
                onClick={onClose}
                className="p-2 rounded-lg transition-colors duration-200 hover:bg-gray-700/50"
              >
                <X className="w-5 h-5 text-gray-400" />
              </button>
            </div>
            
            {/* Stats */}
            <div className="mt-4 grid grid-cols-3 gap-4">
              <div className="text-center p-3 rounded-lg border border-green-500/30" style={{ backgroundColor: '#262626' }}>
                <div className="text-lg font-bold text-green-400">{completedTasks.length}</div>
                <div className="text-xs text-gray-400">Completed</div>
              </div>
              <div className="text-center p-3 rounded-lg border border-yellow-500/30" style={{ backgroundColor: '#262626' }}>
                <div className="text-lg font-bold text-yellow-400">{pendingTasks.length}</div>
                <div className="text-xs text-gray-400">Pending</div>
              </div>
              <div className="text-center p-3 rounded-lg border border-blue-500/30" style={{ backgroundColor: '#262626' }}>
                <div className="text-lg font-bold text-blue-400">{totalPointsEarned}</div>
                <div className="text-xs text-gray-400">Points Earned</div>
              </div>
            </div>

            {/* X Account Status */}
            <div className="mt-4">
              {hasXAccount ? (
                <div className="p-3 rounded-lg border border-green-500/30 bg-green-500/5">
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-400" />
                    <span className="text-sm text-green-400 font-medium">X Account Connected</span>
                  </div>
                  <p className="text-xs text-gray-400 mt-1">
                    Your referrals will be activated when friends connect their X accounts
                  </p>
                </div>
              ) : (
                <div className="p-3 rounded-lg border border-red-500/30 bg-red-500/5">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="flex items-center space-x-2">
                        <Clock className="w-4 h-4 text-red-400" />
                        <span className="text-sm text-red-400 font-medium">X Account Required</span>
                      </div>
                      <p className="text-xs text-gray-400 mt-1">
                        Connect your X account to activate referral rewards
                      </p>
                    </div>
                    <button
                      onClick={handleConnectX}
                      className="px-3 py-1 bg-red-600 hover:bg-red-700 text-white text-xs rounded transition-colors duration-200"
                    >
                      Connect
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Content */}
          <div className="p-6 space-y-6">
            {/* Referral System */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white">Your Referral System</h3>
              
              {/* Referral Link */}
              <div className="p-4 rounded-xl border border-blue-500/30" style={{ backgroundColor: '#262626' }}>
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-2">
                    <LinkIcon className="w-4 h-4 text-blue-400" />
                    <span className="text-sm font-medium text-blue-400">Your Referral Link</span>
                    <span className="text-xs px-2 py-0.5 bg-blue-500/20 text-blue-400 rounded border border-blue-500/30">
                      Permanent
                    </span>
                  </div>
                  <button
                    onClick={handleCopyReferral}
                    className="flex items-center space-x-1 px-3 py-1 rounded-lg bg-blue-600 hover:bg-blue-700 transition-colors duration-200"
                  >
                    {copiedReferral ? (
                      <>
                        <Check className="w-3 h-3" />
                        <span className="text-xs font-medium text-white">Copied!</span>
                      </>
                    ) : (
                      <>
                        <Copy className="w-3 h-3" />
                        <span className="text-xs font-medium text-white">Copy Link</span>
                      </>
                    )}
                  </button>
                </div>
                <p className="text-xs font-mono text-gray-300 break-all bg-gray-800/50 p-2 rounded">
                  {referralLink}
                </p>
                <p className="text-xs text-gray-400 mt-2">
                  🔒 This link is permanently assigned to your account and cannot be changed
                </p>
              </div>

              {/* Referral Status */}
              <div className="p-4 rounded-xl border border-gray-700/50" style={{ backgroundColor: '#262626' }}>
                <div className="flex items-center space-x-2 mb-2">
                  <Users className="w-4 h-4 text-gray-400" />
                  <span className="text-sm font-medium text-gray-300">Referral Status</span>
                </div>
                <p className="text-sm text-gray-400">
                  {referredBy ? (
                    <>Referred by: <span className="text-blue-400 font-medium">{referredBy}</span></>
                  ) : (
                    'Direct User'
                  )}
                </p>
              </div>
            </div>

            {/* Tasks List */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white">Invite Tasks</h3>
              
              {loading ? (
                <div className="text-center py-8">
                  <div className="animate-spin w-8 h-8 border-2 border-blue-400 border-t-transparent rounded-full mx-auto mb-4"></div>
                  <p className="text-gray-400">Loading invite tasks...</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {tasks.map((task) => {
                    const taskInfo = getTaskInfo(task.task_type)
                    const progressPercentage = Math.min((task.current_progress / task.task_target) * 100, 100)
                    
                    return (
                      <div
                        key={task.id}
                        className={`p-4 rounded-xl border transition-all duration-200 ${
                          task.completed
                            ? 'border-green-500/30 bg-green-500/5'
                            : 'border-gray-700/50 bg-gray-800/20 hover:border-gray-600/50'
                        }`}
                      >
                        <div className="flex items-start space-x-4">
                          <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                            task.completed ? 'bg-green-500/20' : 'bg-gray-700/50'
                          }`}>
                            {task.completed ? (
                              <CheckCircle className="w-4 h-4 text-green-400" />
                            ) : (
                              <Users className="w-4 h-4 text-gray-400" />
                            )}
                          </div>
                          
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-2">
                              <h3 className={`font-semibold ${
                                task.completed ? 'text-green-400' : 'text-white'
                              }`}>
                                {taskInfo.title}
                              </h3>
                              <div className="flex items-center space-x-1 flex-shrink-0">
                                <Star className="w-4 h-4 text-yellow-400" />
                                <span className="text-sm font-semibold text-yellow-400">
                                  {task.points_earned}
                                </span>
                              </div>
                            </div>
                            
                            <p className="text-sm text-gray-400 mb-3">{taskInfo.description}</p>
                            
                            {/* Progress Bar */}
                            <div className="space-y-2">
                              <div className="flex items-center justify-between text-xs">
                                <span className="text-gray-400">
                                  Progress: {task.current_progress} / {task.task_target}
                                </span>
                                <span className={`font-medium ${
                                  task.completed ? 'text-green-400' : 'text-blue-400'
                                }`}>
                                  {Math.round(progressPercentage)}%
                                </span>
                              </div>
                              <div className="w-full bg-gray-700/50 rounded-full h-2">
                                <div 
                                  className={`h-2 rounded-full transition-all duration-300 ${
                                    task.completed 
                                      ? 'bg-gradient-to-r from-green-500 to-green-400' 
                                      : 'bg-gradient-to-r from-blue-500 to-blue-400'
                                  }`}
                                  style={{ width: `${progressPercentage}%` }}
                                />
                              </div>
                            </div>
                            
                            {task.completed && task.completed_at && (
                              <p className="text-xs text-green-400 mt-2">
                                ✅ Completed on {new Date(task.completed_at).toLocaleDateString()}
                              </p>
                            )}
                          </div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              )}
            </div>

            {/* How it Works */}
            <div className="p-4 rounded-xl border border-gray-700/50" style={{ backgroundColor: '#262626' }}>
              <h4 className="text-lg font-semibold text-white mb-3">How It Works</h4>
              <div className="space-y-2 text-sm text-gray-400">
                <div className="flex items-start space-x-2">
                  <span className="text-blue-400 font-bold">1.</span>
                  <span>Copy your permanent referral link above</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-400 font-bold">2.</span>
                  <span>Share it with friends to invite them to pumped.fun</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-400 font-bold">3.</span>
                  <span>Friends must connect their wallet AND link their X account</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-400 font-bold">4.</span>
                  <span>Referral status changes from "pending" to "active" when X account is connected</span>
                </div>
                <div className="flex items-start space-x-2">
                  <span className="text-blue-400 font-bold">5.</span>
                  <span>Earn points automatically when referrals become active</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export default TasksMenu